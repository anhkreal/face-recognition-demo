# ===== HEALTH CHECK API =====
# File: face_api/api/health.py
# M·ª•c ƒë√≠ch: Health check v√† system status APIs

import time
from fastapi import APIRouter
from fastapi.responses import JSONResponse
from optimization.startup import get_server_health
from service.performance_monitor import get_performance_stats
from service.shared_instances import get_faiss_manager

health_router = APIRouter()

@health_router.get(
    '/health',
    summary="Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng",
    description="""
    **Ki·ªÉm tra tr·∫°ng th√°i c∆° b·∫£n c·ªßa h·ªá th·ªëng**
    
    API n√†y cung c·∫•p:
    - Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa server
    - Th·ªùi gian ph·∫£n h·ªìi h·ªá th·ªëng
    - T√¨nh tr·∫°ng k·∫øt n·ªëi c∆° b·∫£n
    - Th√¥ng tin uptime
    
    **K·∫øt qu·∫£ tr·∫£ v·ªÅ:**
    - status: healthy/unhealthy
    - timestamp: Th·ªùi gian ki·ªÉm tra
    - uptime: Th·ªùi gian ho·∫°t ƒë·ªông
    - server_info: Th√¥ng tin c∆° b·∫£n v·ªÅ server
    
    **M·ª•c ƒë√≠ch s·ª≠ d·ª•ng:**
    - Monitoring h·ªá th·ªëng
    - Load balancer health check
    - Ki·ªÉm tra t√¨nh tr·∫°ng tr∆∞·ªõc khi g·ª≠i request
    - Debug k·∫øt n·ªëi
    """,
    response_description="Tr·∫°ng th√°i s·ª©c kh·ªèe c∆° b·∫£n c·ªßa h·ªá th·ªëng",
    responses={
        200: {"description": "H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"},
        503: {"description": "H·ªá th·ªëng g·∫∑p s·ª± c·ªë"}
    },
    tags=["üè• Health Check"]
)
def health_check():
    """Basic health check endpoint"""
    health_status = get_server_health()
    
    # Determine HTTP status code
    status_code = 200 if health_status['status'] == 'healthy' else 503
    
    return JSONResponse(
        content=health_status,
        status_code=status_code
    )

@health_router.get(
    '/health/detailed',
    summary="Ki·ªÉm tra s·ª©c kh·ªèe chi ti·∫øt",
    description="""
    **Ki·ªÉm tra tr·∫°ng th√°i chi ti·∫øt v√† hi·ªáu su·∫•t h·ªá th·ªëng**
    
    API n√†y cung c·∫•p th√¥ng tin to√†n di·ªán:
    - T·∫•t c·∫£ th√¥ng tin t·ª´ health check c∆° b·∫£n
    - Metrics hi·ªáu su·∫•t chi ti·∫øt (CPU, RAM, response time)
    - Th√¥ng tin FAISS index (s·ªë vectors, lo·∫°i index)
    - Tr·∫°ng th√°i c√°c service n·ªôi b·ªô
    - Statistics v·ªÅ s·ªë l∆∞·ª£ng request ƒë√£ x·ª≠ l√Ω
    
    **Th√¥ng tin chi ti·∫øt bao g·ªìm:**
    - performance_metrics: CPU, memory usage, avg response time
    - faiss_info: T·ªïng s·ªë vectors, lo·∫°i index, tr·∫°ng th√°i s·∫µn s√†ng
    - request_stats: S·ªë l∆∞·ª£ng request ƒë√£ x·ª≠ l√Ω, t·ª∑ l·ªá th√†nh c√¥ng
    - system_resources: T√¨nh tr·∫°ng t√†i nguy√™n h·ªá th·ªëng
    
    **·ª®ng d·ª•ng:**
    - Monitoring hi·ªáu su·∫•t chi ti·∫øt
    - Debugging khi c√≥ v·∫•n ƒë·ªÅ
    - Capacity planning
    - Performance optimization
    """,
    response_description="Th√¥ng tin s·ª©c kh·ªèe v√† hi·ªáu su·∫•t chi ti·∫øt",
    responses={
        200: {"description": "Th√¥ng tin chi ti·∫øt h·ªá th·ªëng"},
        503: {"description": "H·ªá th·ªëng g·∫∑p s·ª± c·ªë v·ªõi th√¥ng tin chi ti·∫øt"}
    },
    tags=["üè• Health Check"]
)
def detailed_health_check():
    """Detailed health check v·ªõi performance metrics"""
    health_status = get_server_health()
    performance_stats = get_performance_stats()
    
    try:
        faiss_manager = get_faiss_manager()
        faiss_info = {
            'total_vectors': len(faiss_manager.image_ids) if hasattr(faiss_manager, 'image_ids') else 0,
            'index_type': type(faiss_manager.index).__name__ if hasattr(faiss_manager, 'index') else 'Unknown',
            'index_ready': hasattr(faiss_manager, 'index') and faiss_manager.index is not None
        }
    except Exception as e:
        faiss_info = {'error': str(e), 'index_ready': False}
    
    detailed_status = {
        **health_status,
        'performance_metrics': performance_stats,
        'faiss_info': faiss_info
    }
    
    status_code = 200 if health_status['status'] == 'healthy' else 503
    
    return JSONResponse(
        content=detailed_status,
        status_code=status_code
    )

@health_router.get('/health/readiness')
def readiness_check():
    """Readiness check cho Kubernetes/Docker"""
    health_status = get_server_health()
    
    # Ki·ªÉm tra c√°c components c·∫ßn thi·∫øt
    required_components = ['shared_instances', 'faiss_index', 'model_extractor']
    is_ready = all(health_status['components'].get(comp, False) for comp in required_components)
    
    readiness_status = {
        'ready': is_ready,
        'components': health_status['components'],
        'timestamp': health_status['timestamp']
    }
    
    status_code = 200 if is_ready else 503
    
    return JSONResponse(
        content=readiness_status,
        status_code=status_code
    )

@health_router.get('/health/liveness')
def liveness_check():
    """Liveness check cho Kubernetes/Docker"""
    try:
        # Basic liveness check - server c√≥ ƒëang ch·∫°y kh√¥ng
        from service.shared_instances import get_faiss_manager
        faiss_manager = get_faiss_manager()
        
        liveness_status = {
            'alive': True,
            'timestamp': time.time()
        }
        
        return JSONResponse(content=liveness_status, status_code=200)
        
    except Exception as e:
        return JSONResponse(
            content={'alive': False, 'error': str(e)},
            status_code=503
        )
