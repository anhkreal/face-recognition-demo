# ===== PERFORMANCE API =====
# File: face_api/api/performance.py
# M·ª•c ƒë√≠ch: API endpoint ƒë·ªÉ xem performance metrics

from fastapi import APIRouter
from fastapi.responses import JSONResponse
from service.performance_monitor import get_performance_stats, get_performance_summary
from service.shared_instances import get_faiss_manager

performance_router = APIRouter()

@performance_router.get(
    '/performance/stats',
    summary="Th·ªëng k√™ hi·ªáu su·∫•t chi ti·∫øt",
    description="""
    **Xem th·ªëng k√™ hi·ªáu su·∫•t chi ti·∫øt c·ªßa h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t**
    
    API n√†y cung c·∫•p:
    - Metrics hi·ªáu su·∫•t chi ti·∫øt v·ªÅ CPU, RAM, th·ªùi gian ph·∫£n h·ªìi
    - Th√¥ng tin FAISS index (s·ªë vectors, lo·∫°i index, k√≠ch th∆∞·ªõc embedding)
    - Th·ªëng k√™ s·ªë l∆∞·ª£ng request ƒë√£ x·ª≠ l√Ω
    - T·ª∑ l·ªá th√†nh c√¥ng/th·∫•t b·∫°i c·ªßa c√°c operation
    - T√¨nh tr·∫°ng s·ª≠ d·ª•ng t√†i nguy√™n h·ªá th·ªëng
    
    **Th√¥ng tin bao g·ªìm:**
    - performance_stats: CPU usage, memory consumption, response times
    - faiss_info: Vector count, index type, embedding dimensions
    - request_metrics: Total requests, success rate, error rate
    - resource_usage: System resources utilization
    
    **·ª®ng d·ª•ng:**
    - Monitoring hi·ªáu su·∫•t real-time
    - Ph√¢n t√≠ch bottleneck h·ªá th·ªëng
    - Capacity planning
    - Performance tuning
    - Troubleshooting v·∫•n ƒë·ªÅ hi·ªáu su·∫•t
    """,
    response_description="Th·ªëng k√™ hi·ªáu su·∫•t chi ti·∫øt v·ªõi metrics ƒë·∫ßy ƒë·ªß",
    tags=["üè• Health Check"]
)
def get_performance_stats_api():
    """L·∫•y th·ªëng k√™ chi ti·∫øt v·ªÅ hi·ªáu su·∫•t"""
    stats = get_performance_stats()
    faiss_manager = get_faiss_manager()
    
    # Th√™m th√¥ng tin FAISS
    faiss_info = {
        'total_vectors': len(faiss_manager.image_ids) if hasattr(faiss_manager, 'image_ids') else 0,
        'index_type': 'IndexFlatIP',
        'embedding_size': 512
    }
    
    return {
        'performance_stats': stats,
        'faiss_info': faiss_info,
        'summary': get_performance_summary()
    }

@performance_router.get(
    '/performance/summary',
    summary="T√≥m t·∫Øt hi·ªáu su·∫•t h·ªá th·ªëng",
    description="""
    **Xem t√≥m t·∫Øt hi·ªáu su·∫•t t·ªïng quan c·ªßa h·ªá th·ªëng**
    
    API n√†y cung c·∫•p th√¥ng tin t√≥m t·∫Øt:
    - T√¨nh tr·∫°ng hi·ªáu su·∫•t t·ªïng quan
    - Metrics ch√≠nh ƒë∆∞·ª£c t√≥m g·ªçn
    - Trends hi·ªáu su·∫•t theo th·ªùi gian
    - Alerts v√† warnings n·∫øu c√≥
    - Key performance indicators (KPIs)
    
    **Th√¥ng tin t√≥m t·∫Øt:**
    - overall_status: T√¨nh tr·∫°ng t·ªïng quan (good/warning/critical)
    - key_metrics: C√°c ch·ªâ s·ªë quan tr·ªçng nh·∫•t
    - trends: Xu h∆∞·ªõng thay ƒë·ªïi hi·ªáu su·∫•t
    - recommendations: ƒê·ªÅ xu·∫•t t·ªëi ∆∞u h√≥a (n·∫øu c√≥)
    
    **Ph√π h·ª£p cho:**
    - Dashboard t·ªïng quan
    - Quick health check
    - Management reporting
    - High-level monitoring
    - Status page hi·ªÉn th·ªã cho user
    """,
    response_description="T√≥m t·∫Øt hi·ªáu su·∫•t t·ªïng quan c·ªßa h·ªá th·ªëng",
    tags=["üè• Health Check"]
)
def get_performance_summary_api():
    """L·∫•y t√≥m t·∫Øt hi·ªáu su·∫•t"""
    return {
        'summary': get_performance_summary(),
        'stats': get_performance_stats()
    }
